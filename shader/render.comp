#version 460
layout(local_size_x = 1, local_size_y = 1) in;
layout(binding = 0, rgba8) uniform image2D renderImage;
layout(binding = 1, rgba32f) uniform image2D inVelocityImage;
layout(binding = 2, rgba32f) uniform image2D divergenceImage;
layout(binding = 3, rgba32f) uniform image2D pressureImage;
layout(binding = 4, rgba32f) uniform image2D outVelocityImage;

vec2 toUV(vec2 value)
{
    return (value + vec2(0.5)) / (vec2(gl_NumWorkGroups) * vec2(gl_WorkGroupSize));
}

void main()
{
    float pres_x0 = imageLoad(pressureImage, ivec2(gl_GlobalInvocationID.xy - vec2(1, 0))).x;
    float pres_x1 = imageLoad(pressureImage, ivec2(gl_GlobalInvocationID.xy + vec2(1, 0))).x;
    float pres_y0 = imageLoad(pressureImage, ivec2(gl_GlobalInvocationID.xy - vec2(0, 1))).y;
    float pres_y1 = imageLoad(pressureImage, ivec2(gl_GlobalInvocationID.xy + vec2(0, 1))).y;
    float dx = (pres_x1 - pres_x0) / 2.0;
    float dy = (pres_y1 - pres_y0) / 2.0;
    vec2 gradient = vec2(dx, dy);

    vec2 velocity = imageLoad(inVelocityImage, ivec2(gl_GlobalInvocationID.xy)).xy;
    velocity = (velocity - gradient) * 0.995;
    imageStore(outVelocityImage, ivec2(gl_GlobalInvocationID.xy), vec4(velocity, 0, 1));
    vec3 color = vec3(abs(velocity.x) * 3, 0, abs(velocity.y) * 3);
    imageStore(renderImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}
